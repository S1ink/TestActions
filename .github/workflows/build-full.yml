name: Build Deps
on: workflow_dispatch
jobs:
 
  get-latest-releases:
    runs-on: ubuntu-latest
    outputs:
      tf-tag: ${{ steps.tf-latest-tag.outputs.tag }}
      tf-commit: ${{ steps.tf-latest-commit.outputs.commit }}
      tf-sha256: ${{ steps.tf-latest-hash.outputs.sha256 }}
      wpilibpi-tag: ${{ steps.wpilibpi-latest-tag.outputs.tag }}
      pigpio-tag: ${{ steps.pigpio-latest-tag.outputs.tag }}
    steps:
      - run: echo '::echo::on'
      - name: Get latest TF release tag
        id: tf-latest-tag
        run: echo "::set-output name=tag::$(curl -s https://api.github.com/repos/tensorflow/tensorflow/releases/latest | jq '.tag_name' | sed 's/\"//g')"
      - name: Get latest TF commit
        id: tf-latest-commit
        run: echo "::set-output name=commit::$(git ls-remote https://github.com/tensorflow/tensorflow/refs/tags/${{ steps.tf-latest-tag.outputs.tag }} | awk '{print $1}')"
      - name: Get latest TF hash code
        id: tf-latest-hash
        run: echo "::set-output name=sha256::$(curl -L "https://github.com/tensorflow/tensorflow/archive/${{ steps.tf-latest-commit.outputs.commit }}.tar.gz" | sha256sum | awk '{print $1}')"
      - name: Get latest WPILibPi tag
        id: wpilibpi-latest-tag
        run: echo "::set-output name=tag::$(curl -s https://api.github.com/repos/wpilibsuite/WPILibPi/releases/latest | jq '.tag_name' | sed 's/\"//g')"
      - name: Get latest WPILibPi tag
        id: pigpio-latest-tag
        run: echo "::set-output name=tag::$(curl -s https://api.github.com/repos/joan2937/pigpio/releases/latest | jq '.tag_name' | sed 's/\"//g')"
      - name: Confirm Info
        run: |
          echo ${{ steps.tf-latest-tag.outputs.tag }}
          echo ${{ steps.tf-latest-commit.outputs.commit }}
          echo ${{ steps.tf-latest-hash.outputs.sha256 }}
          echo ${{ steps.wpilibpi-latest-tag.outputs.tag }}
          echo ${{ steps.pigpio-latest-tag.outputs.tag }}
  
  get-wpilibpi:
    runs-on: ubuntu-latest
    needs: get-latest-releases
    steps:
      - run: echo '::echo::on'
      - name: Extract Latest WPILibPi
        run: |
          wget https://github.com/wpilibsuite/WPILibPi/releases/download/${{ needs.get-latest-releases.outputs.wpilibpi-tag }}/cpp-multiCameraServer.zip
          apt-get install unzip
          mkdir {out,artifacts}
          unzip cpp-multiCameraServer.zip out
          cp -R out/cpp-multiCameraServer/lib artifacts
          cp -R out/cpp-multiCameraServer/include artifacts
      - uses: actions/upload-artifact@main
        with:
          name: build-wpilib
          path: artifacts
  
  build-pigpio:
    runs-on: ubuntu-latest
    needs: get-latest-releases
    steps:
      - run: echo '::echo::on'
      - name: Checkout Pigpio
        uses: actions/checkout@main
        with:
          repository: joan2937/pigpio
          ref: ${{ needs.get-latest-releases.outputs.pigpio-tag }}
      - name: Get Cross Compiler
        run: sudo apt-get install gcc-arm-linux-gnueabihf
      - name: Build and Copy
        run: |
         gcc-arm-linux-gnueabihf-gcc --version
         CROSS_PREFIX=gcc-arm-linux-gnueabihf- make lib
         mkdir artifacts
         cp libpigpio.so artifacts
         cp pigpio.h artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@main
        with:
          name: build-pigpio
          path: artifacts
  
  build-tflite:
    runs-on: ubuntu-latest
    needs: get-latest-releases
    steps:
      - run: echo '::echo::on'
      - name: Checkout Tensorflow
        uses: actions/checkout@main
        with:
          repository: tensorflow/tensorflow
          ref: ${{ needs.get-latest-releases.outputs.tf-tag }}
      - name: Get Deps
        run: |
          npm install @bazel/bazelisk
          pip install numpy
      - name: Build
        run: |
          cd tensorflow
          ls -l
          bazel build --config=elinux_armhf -c opt //tensorflow/lite:libtensorflowlite.so
      - name: Copy Artifact
        run: |
          mkdir artifacts
          find ./tensorflow -name '*.h' | cpio -pdm ./artifacts
          cp bazel-bin/tensorflow/lite/libtensorflowlite.so artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with: 
          name: build-tflite
          path: artifacts
          
  build-edgetpu:
    runs-on: ubuntu-latest
    needs: get-latest-releases
    steps:
      - run: echo '::echo::on'

      - name: Checkout Libedgetpu
        uses: actions/checkout@main
        with:
          repository: google-coral/libedgetpu

      - name: Configure Build
        run: |
          sed -i 's/TENSORFLOW_COMMIT = ".*/TENSORFLOW_COMMIT = "${{ needs.get-latest-releases.outputs.tf-commit }}"/' ./workspace.bzl
          sed -i 's/TENSORFLOW_SHA256 = ".*/TENSORFLOW_SHA256 = "${{ needs.get-latest-releases.outputs.tf-sha256 }}"/' ./workspace.bzl
          sed -i 's/$(STRIPPED_SUFFIX)//' ./Makefile
          cat ./workspace.bzl
          cat ./Makefile
          mkdir -p artifacts/{direct,throttled}
      
      - name: Build
        run: |
         DOCKER_CPUS="armv7a" DOCKER_IMAGE="debian:stretch" DOCKER_TARGETS=libedgetpu make docker-build
         cp out/direct/armv7a/libedgetpu.so.1.0 artifacts/direct/libedgetpu.so
         cp out/throttled/armv7a/libedgetpu.so.1.0 artifacts/throttled/libedgetpu.so
         cp tflite/public/edgetpu.h artifacts

      - name: Upload Artifacts
        uses: actions/upload-artifact@main
        with:
          name: build-edgetpu
          path: artifacts
